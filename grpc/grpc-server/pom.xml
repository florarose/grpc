<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ldt.grpc</groupId>
    <artifactId>server</artifactId>
    <version>1.0-SNAPSHOT</version>


    <dependencies>
        <dependency>
            <groupId>com.ldt.grpc</groupId>
            <artifactId>centre</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.ldt.grpc</groupId>
            <artifactId>common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!--mybatis-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.4.1</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.21</version>
        </dependency>

    </dependencies>
    <!-- build节点普遍已经存在了，在其下增加resources等节点 -->
    <build>
        <!-- 打包文件内容配置 -->
        <resources>
            <!-- 将src/main/java下的**/*.xml任意目录下的xml文件打包到对应的文件目录中 -->
            <resource>
                <directory>src/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <!-- 将src/main/resources下的**/*.*任意目录下的任意文件打包到对应的文件目录中 -->
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
        </resources>

            <finalName>${project.artifactId}</finalName>  <!--这里一定要定义生成的JAR包文件名-->
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>

                <!--Docker 插件-->
                <!-- 构建镜像：       mvn docker:build -->
                <!-- 启动镜像：       mvn docker:start -->
                <!-- 停止镜像：       mvn docker:stop  -->
                <!-- 删除镜像：       mvn -Ddocker.removeAll docker:remove  -->
                <!-- 查看镜像日志：    mvn docker:logs -->
                <!-- 镜像启动成功后，访问地址为： http://192.168.1.70:8881/ams-server -->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.20.0</version>
                    <extensions>true</extensions>
                    <configuration>
                        <dockerHost>http://192.168.0.54:2735</dockerHost>
                        <images>
                            <image>
                                <name>iciyun/${project.artifactId}</name> <!--生成的image名-->
                                <alias>${project.artifactId}</alias>
                                <build>
                                    <from>java:8u40</from>
                                    <maintainer>john.doe@example.com</maintainer>
                                    <tags>
                                        <tag>latest</tag>
                                        <tag>${project.version}</tag>
                                    </tags>
                                    <ports>
                                        <port>8080</port>
                                    </ports>
                                    <volumes>
                                        <volume>/usr/src/myapp</volume>
                                    </volumes>
                                    <buildOptions>
                                        <shmsize>2147483648</shmsize>
                                    </buildOptions>

                                    <entryPoint>
                                        <!-- exec form for ENTRYPOINT -->
                                        <exec>
                                            <arg>java</arg>
                                            <arg>-jar</arg>  <!--启动参数-->
                                            <arg>/usr/src/myapp/${project.artifactId}.jar</arg>
                                        </exec>
                                    </entryPoint>

                                    <assembly>
                                        <mode>dir</mode>
                                        <basedir>/</basedir>
                                        <descriptor>assembly.xml</descriptor>
                                    </assembly>
                                </build>
                                <run>
                                    <namingStrategy>alias</namingStrategy>  <!--container全名规则-->
                                    <ports>
                                        <port>0.0.0.0:5555:8080</port> <!--端口映射-->
                                    </ports>
                                </run>
                            </image>
                        </images>
                    </configuration>
                    <executions>
                        <!-- 以下为插件与Maven声明周期做绑定，可选择使用 -->
                        <!--<execution>-->
                        <!--<id>build-docker-image</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                        <!--<goal>build</goal>-->
                        <!--</goals>-->
                        <!--</execution>-->
                        <!--<execution>-->
                        <!--<id>push-docker-image-to-registry</id>-->
                        <!--<phase>deploy-goho</phase>-->
                        <!--<goals>-->
                        <!--<goal>push</goal>-->
                        <!--</goals>-->
                        <!--</execution>-->
                    </executions>
                </plugin>

            </plugins>
    </build>


</project>
